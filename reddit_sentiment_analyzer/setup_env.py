#!/usr/bin/env python3
"""
Interactive setup script for configuring the .env file.

This script helps you set up your environment variables step by step.
"""

import os
from pathlib import Path


def get_input(prompt, default="", required=True, hide_input=False):
    """Get user input with optional default value."""
    if default:
        prompt = f"{prompt} [{default}]: "
    else:
        prompt = f"{prompt}: "
    
    if hide_input:
        import getpass
        value = getpass.getpass(prompt)
    else:
        value = input(prompt).strip()
    
    if not value and default:
        return default
    elif not value and required:
        print("‚ùå This field is required!")
        return get_input(prompt.replace(": ", ""), default, required, hide_input)
    
    return value


def setup_env_file():
    """Interactive setup of .env file."""
    print("üöÄ Reddit Sentiment Analyzer - Environment Setup")
    print("=" * 50)
    
    env_file = Path(".env")
    
    # Check if .env already exists
    if env_file.exists():
        overwrite = input("üìÑ .env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("‚úÖ Keeping existing .env file")
            return
    
    print("\nüìù Let's set up your environment variables...")
    print("You can press Enter to use default values where shown.\n")
    
    # Collect environment variables
    env_vars = {}
    
    # Basic settings
    print("üîß Basic Settings:")
    env_vars['ENVIRONMENT'] = get_input("Environment (development/production)", "development")
    env_vars['DEBUG'] = get_input("Debug mode (true/false)", "true")
    env_vars['LOG_LEVEL'] = get_input("Log level (DEBUG/INFO/WARNING/ERROR)", "INFO")
    
    # API Keys
    print("\nüîë API Keys:")
    env_vars['OPENAI_API_KEY'] = get_input("OpenAI API Key", "", True, True)
    env_vars['APIFY_API_KEY'] = get_input("Apify API Key", "", True, True)
    
    # Supabase Configuration
    print("\nüíæ Supabase Configuration:")
    print("You can find these in your Supabase project settings:")
    print("- URL: Project Settings ‚Üí API ‚Üí Project URL")
    print("- Key: Project Settings ‚Üí API ‚Üí anon public key")
    print("- Service Role Key: Project Settings ‚Üí API ‚Üí service_role secret key")
    
    supabase_url = get_input("Supabase Project URL (https://xxx.supabase.co)", "", True)
    env_vars['SUPABASE_URL'] = supabase_url
    
    env_vars['SUPABASE_KEY'] = get_input("Supabase Anon Key", "", True, True)
    env_vars['SUPABASE_SERVICE_ROLE_KEY'] = get_input("Supabase Service Role Key", "", True, True)
    env_vars['SUPABASE_BRANDS_TABLE'] = get_input("Brands table name", "brands")
    env_vars['SUPABASE_RESULTS_TABLE'] = get_input("Results table name", "analysis_results")
    
    # Optional settings
    print("\n‚öôÔ∏è  Optional Settings (press Enter for defaults):")
    env_vars['API_HOST'] = get_input("API Host", "0.0.0.0", False)
    env_vars['API_PORT'] = get_input("API Port", "8000", False)
    env_vars['SECRET_KEY'] = get_input("Secret Key (for production)", "dev-secret-key-change-in-production", False)
    
    # Write .env file
    print(f"\nüíæ Writing .env file...")
    
    with open(env_file, 'w') as f:
        f.write("# Reddit Sentiment Analyzer Environment Configuration\n")
        f.write("# Generated by setup_env.py\n\n")
        
        # Basic settings
        f.write("# Basic Settings\n")
        f.write(f"ENVIRONMENT={env_vars['ENVIRONMENT']}\n")
        f.write(f"DEBUG={env_vars['DEBUG']}\n")
        f.write(f"LOG_LEVEL={env_vars['LOG_LEVEL']}\n\n")
        
        # API Configuration
        f.write("# API Configuration\n")
        f.write(f"API_HOST={env_vars['API_HOST']}\n")
        f.write(f"API_PORT={env_vars['API_PORT']}\n\n")
        
        # External API Keys
        f.write("# External API Keys\n")
        f.write(f"OPENAI_API_KEY={env_vars['OPENAI_API_KEY']}\n")
        f.write(f"APIFY_API_KEY={env_vars['APIFY_API_KEY']}\n\n")
        
        # Supabase Configuration
        f.write("# Supabase Configuration\n")
        f.write(f"SUPABASE_URL={env_vars['SUPABASE_URL']}\n")
        f.write(f"SUPABASE_KEY={env_vars['SUPABASE_KEY']}\n")
        f.write(f"SUPABASE_SERVICE_ROLE_KEY={env_vars['SUPABASE_SERVICE_ROLE_KEY']}\n")
        f.write(f"SUPABASE_BRANDS_TABLE={env_vars['SUPABASE_BRANDS_TABLE']}\n")
        f.write(f"SUPABASE_RESULTS_TABLE={env_vars['SUPABASE_RESULTS_TABLE']}\n\n")
        
        # Security
        f.write("# Security\n")
        f.write(f"SECRET_KEY={env_vars['SECRET_KEY']}\n")
        f.write("JWT_SECRET_KEY=your-jwt-secret-key\n")
        f.write("JWT_ALGORITHM=HS256\n")
        f.write("JWT_EXPIRATION_HOURS=24\n\n")
        
        # Feature Flags
        f.write("# Feature Flags\n")
        f.write("ENABLE_CACHING=true\n")
        f.write("ENABLE_METRICS=true\n")
        f.write("ENABLE_TRACING=true\n")
        f.write("ENABLE_RATE_LIMITING=true\n")
    
    print("‚úÖ .env file created successfully!")
    
    # Show next steps
    print("\nüéØ Next Steps:")
    print("1. Set up your Supabase database tables:")
    print("   - Go to your Supabase dashboard ‚Üí SQL Editor")
    print("   - Run the SQL commands from SETUP_GUIDE.md")
    print("\n2. Test your setup:")
    print("   python test_setup.py")
    print("\n3. Run analysis:")
    print("   python test_analysis.py")
    
    return True


def main():
    """Main setup function."""
    try:
        setup_env_file()
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user")
        return False
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")
        return False
    
    return True


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
